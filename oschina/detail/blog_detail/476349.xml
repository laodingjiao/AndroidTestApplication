<?xml version="1.0" encoding="UTF-8"?><oschina>
	<blog>
								<id>476349</id>
		<title><![CDATA[tornado 源码初识]]></title>
		<url><![CDATA[http://my.oschina.net/abc2001x/blog/476349]]></url>
		<where><![CDATA[工作日志]]></where>
		<commentCount>7</commentCount>
		<body><![CDATA[<style type='text/css'>pre {white-space:pre-wrap;word-wrap:break-word;}</style><h2>序言</h2> 
<pre><code>最近闲暇无事,阅读了一下tornado的源码,对整体的结构有了初步认识,与大家分享
</code></pre> 
<h2>ioloop</h2> 
<pre><code>`ioloop`是`tornado`的核心模块,也是个调度模块,各种异步事件都是由他调度的,所以必须弄清他的执行逻辑
</code></pre> 
<h3>源码分析</h3> 
<pre><code>而`ioloop`的核心部分则是 `while True`这个循环内部的逻辑,贴上他的代码如下
</code></pre> 
<pre><code>   def start(self):
        if self._running:
            raise RuntimeError("IOLoop is already running")
        self._setup_logging()
        if self._stopped:
            self._stopped = False
            return
        old_current = getattr(IOLoop._current, "instance", None)
        IOLoop._current.instance = self
        self._thread_ident = thread.get_ident()
        self._running = True

        old_wakeup_fd = None
        if hasattr(signal, 'set_wakeup_fd') and os.name == 'posix':
           
            try:
                old_wakeup_fd = signal.set_wakeup_fd(self._waker.write_fileno())
                if old_wakeup_fd != -1:
                   
                    signal.set_wakeup_fd(old_wakeup_fd)
                    old_wakeup_fd = None
            except ValueError:
                
                old_wakeup_fd = None

        try:
            while True:
                
                with self._callback_lock:
                    callbacks = self._callbacks
                    self._callbacks = []

                due_timeouts = []

                if self._timeouts:
                    now = self.time()
                    while self._timeouts:
                        if self._timeouts[0].callback is None:
                        
                            heapq.heappop(self._timeouts)
                            self._cancellations -= 1
                        elif self._timeouts[0].deadline &lt;= now:
                            due_timeouts.append(heapq.heappop(self._timeouts))
                        else:
                            break
                    if (self._cancellations &gt; 512
                            and self._cancellations &gt; (len(self._timeouts) &gt;&gt; 1)):
                        self._cancellations = 0
                        self._timeouts = [x for x in self._timeouts
                                          if x.callback is not None]
                        heapq.heapify(self._timeouts)

                for callback in callbacks:
                    self._run_callback(callback)
                for timeout in due_timeouts:
                    if timeout.callback is not None:
                        self._run_callback(timeout.callback)

                callbacks = callback = due_timeouts = timeout = None

                if self._callbacks:
                   
                    poll_timeout = 0.0
                elif self._timeouts:
                   
                    poll_timeout = self._timeouts[0].deadline - self.time()
                    poll_timeout = max(0, min(poll_timeout, _POLL_TIMEOUT))
                else:
                   
                    poll_timeout = _POLL_TIMEOUT

                if not self._running:
                    break

                if self._blocking_signal_threshold is not None:
                   
                    signal.setitimer(signal.ITIMER_REAL, 0, 0)

                try:
                    event_pairs = self._impl.poll(poll_timeout)
                except Exception as e:
                    
                    if errno_from_exception(e) == errno.EINTR:
                        continue
                    else:
                        raise

                if self._blocking_signal_threshold is not None:
                    signal.setitimer(signal.ITIMER_REAL,
                                     self._blocking_signal_threshold, 0)

                self._events.update(event_pairs)
                while self._events:
                    fd, events = self._events.popitem()
                    try:
                        fd_obj, handler_func = self._handlers[fd]
                        handler_func(fd_obj, events)
                    except (OSError, IOError) as e:
                        if errno_from_exception(e) == errno.EPIPE:
                            
                            pass
                        else:
                            self.handle_callback_exception(self._handlers.get(fd))
                    except Exception:
                        self.handle_callback_exception(self._handlers.get(fd))
                fd_obj = handler_func = None

        finally:
        
            self._stopped = False
            if self._blocking_signal_threshold is not None:
                signal.setitimer(signal.ITIMER_REAL, 0, 0)
            IOLoop._current.instance = old_current
            if old_wakeup_fd is not None:
                signal.set_wakeup_fd(old_wakeup_fd)
</code></pre> 
<pre><code>除去注释,代码其实没多少行. 由while 内部代码可以看出ioloop主要由三部分组成:
</code></pre> 
<h3>1.回调 callbacks</h3> 
<p>他是<code>ioloop</code>回调的基础部分,通过<code>IOLoop.instance().add_callback()</code>添加到<code>self._callbacks</code><br>他们将在每一次<code>loop</code>中被运行. </p> 
<p>主要用途是将逻辑分块,在适合时机将包装好的<code>callbac</code>k添加到<code>self._callbacks</code>让其执行. </p> 
<p>例如<code>ioloop</code>中的<code>add_future</code><br> </p> 
<pre><code><br>def add_future(self, future, callback):
        """Schedules a callback on the ``IOLoop`` when the given
        `.Future` is finished.

        The callback is invoked with one argument, the
        `.Future`.
        """
        assert is_future(future)
        callback = stack_context.wrap(callback)
        future.add_done_callback(
            lambda future: self.add_callback(callback, future))
</code></pre> 
<p></p> 
<p><code>future</code>对象得到<code>result</code>的时候会调用<code>future.add_done_callback</code>添加的<code>callback</code>,再将其转至<code>ioloop</code>执行</p> 
<h3>2.定时器 due_timeouts</h3> 
<p>这是定时器,在指定的事件执行<code>callback</code>.<br>跟1中的<code>callback</code>类似,通过<code>IOLoop.instance().add_callback</code></p> 
<p>在每一次循环,会计算<code>timeouts</code>回调列表里的事件,运行已到期的<code>callback</code>.<br>当然不是无节操的循环.</p> 
<p>因为<code>poll</code>操作会阻塞到有<code>io</code>操作发生,所以只要计算最近的<code>timeout</code>,<br>然后用这个时间作为<code>self._impl.poll(poll_timeout)</code> 的 <code>poll_timeout</code> ,<br>就可以达到按时运行了</p> 
<p>但是,假设<code>poll_timeout</code>的时间很大时,<code>self._impl.poll</code>一直在堵塞中(没有io事件,但在处理某一个<code>io</code>事件),<br>那添加刚才1中的<code>callback</code>不是要等很久才会被运行吗? 答案当然是不会.<br><code>ioloop</code>中有个<code>waker</code>对象,他是由两个<code>fd</code>组成,一个读一个写.<br><code>ioloop</code>在初始化的时候把waker绑定到<code>epoll</code>里了,<code>add_callback</code>时会触发waker的读写.<br>这样<code>ioloop</code>就会在<code>poll</code>中被唤醒了,接着就可以及时处理<code>timeout callback</code>了</p> 
<p>用这样的方式也可以自己封装一个小的定时器功能玩玩</p> 
<h3>3.io事件的event loop</h3> 
<p>处理<code>epoll</code>事件的功能<br>通过<code>IOLoop.instance().add_handler(fd, handler, events)</code>绑定<code>fd event</code>的处理事件<br>在<code>httpserver.listen</code>的代码内,<br><code>netutil.py</code>中的<code>netutil.py</code>的<code>add_accept_handler</code>绑定<code>accept handler</code>处理客户端接入的逻辑</p> 
<p>如法炮制,其他的io事件也这样绑定,业务逻辑的分块交由<code>ioloop</code>的<code>callback</code>和<code>future</code>处理</p> 
<p>关于<code>epoll</code>的用法的内容.详情见我第一篇<a href="http://segmentfault.com/a/1190000002965546?_ea=251087" rel="nofollow">文章</a>吧,哈哈</p> 
<h3>总结</h3> 
<p>ioloop由<code>callback</code>(业务分块), <code>timeout callback</code>(定时任务) <code>io event</code>(io传输和解析) 三块组成,互相配合完成异步的功能,构建<code>gen</code>,<code>httpclient</code>,<code>iostream</code>等功能</p> 
<p>串联大致的流程是,<code>tornado</code> 绑定io event,处理io传输解析,传输完成后(结合Future)回调(callback)业务处理的逻辑和一些固定操作 . 定时器则是较为独立的模块</p> 
<h2>Futrue</h2> 
<p>个人认为<code>Future</code>是<code>tornado</code>仅此<code>ioloop</code>重要的模块,他贯穿全文,所有异步操作都有他的身影<br>顾名思义,他主要是关注日后要做的事,类似<code>jquery</code>的<code>Deferred</code>吧</p> 
<p>一般的用法是通过<code>ioloop</code>的<code>add_future</code>定义<code>future</code>的<code>done callback</code>,<br>当<code>future</code>被<code>set_result</code>的时候,<code>future</code>的<code>done callback</code>就会被调用.<br>从而完成<code>Future</code>的功能.</p> 
<p>具体可以参考<code>gen.coroutine</code>的实现,本文后面也会讲到</p> 
<p>他的组成不复杂,只有几个重要的方法<br>最重要的是 <code>add_done_callback</code> , <code>set_result</code></p> 
<p><code>tornado</code>用<code>Future</code>和<code>ioloop</code>,<code>yield</code>实现了<code>gen.coroutine</code></p> 
<h3>1. add_done_callback</h3> 
<p>跟<code>ioloop</code>的<code>callback</code>类似 , 存储事件完成后的<code>callback</code>在<code>self._callbacks</code>里<br> </p> 
<pre><code><br>def add_done_callback(self, fn):
        if self._done:
            fn(self)
        else:
            self._callbacks.append(fn)
</code></pre> 
<p></p> 
<h3>2.set_result</h3> 
<p>设置事件的结果,并运行之前存储好的<code>callback</code></p> 
<pre><code>def set_result(self, result):
        self._result = result
        self._set_done()

def _set_done(self):
        self._done = True
        for cb in self._callbacks:
            try:
                cb(self)
            except Exception:
                app_log.exception('Exception in callback %r for %r',
                                  cb, self)
        self._callbacks = None
</code></pre> 
<p>为了验证之前所说的,上一段测试代码</p> 
<pre><code>#! /usr/bin/env python
#coding=utf-8

import tornado.web
import tornado.ioloop

from tornado.gen import coroutine
from tornado.concurrent import Future


def test():
	def pp(s):
		print s

	future = Future()
	iol = tornado.ioloop.IOLoop.instance()

	print 'init future %s'%future

	iol.add_future(future, lambda f: pp('ioloop callback after future done,future is %s'%f))

	#模拟io延迟操作
	iol.add_timeout(iol.time()+5,lambda:future.set_result('set future is done'))

	print 'init complete'
	tornado.ioloop.IOLoop.instance().start()

if __name__ == "__main__":
	test()	
</code></pre> 
<p>运行结果:</p> 
<p><img src="http://192.168.79.254:8080/oschina/images/uploads/img/201507/08214241_r8Fr.png" alt="输入图片说明" title="在这里输入图片标题"></p>
<h2>gen.coroutine</h2> 
<p>接着继续延伸,看看<code>coroutine</code>的实现<br><code>gen.coroutine</code>实现的功能其实是将原来的<code>callback</code>的写法,用<code>yield</code>的写法代替. 即以yield为分界,将代码分成两部分.<br>如:</p> 
<pre><code>#! /usr/bin/env python
#coding=utf-8

import tornado.ioloop
from tornado.gen import coroutine
from tornado.httpclient import AsyncHTTPClient

@coroutine
def cotest():
	client = AsyncHTTPClient()
	res = yield client.fetch("http://www.segmentfault.com/")
	print res

if __name__ == "__main__":
	f = cotest()	
	print f #这里返回了一个future哦
	tornado.ioloop.IOLoop.instance().start()

</code></pre> 
<p>运行结果:</p> 
<p><img src="http://192.168.79.254:8080/oschina/images/uploads/img/201507/08214302_YTXn.png" alt="输入图片说明" title="在这里输入图片标题"></p>
<h3>源码分析</h3> 
<p>接下来分析下<code>coroutine</code>的实现</p> 
<pre><code>def _make_coroutine_wrapper(func, replace_callback):
    
    @functools.wraps(func)
    def wrapper(*args, **kwargs):
        future = TracebackFuture()

        if replace_callback and 'callback' in kwargs:
            callback = kwargs.pop('callback')
            IOLoop.current().add_future(
                future, lambda future: callback(future.result()))

        try:
            result = func(*args, **kwargs)
        except (Return, StopIteration) as e:
            result = getattr(e, 'value', None)
        except Exception:
            future.set_exc_info(sys.exc_info())
            return future
        else:
            if isinstance(result, types.GeneratorType):
                try:
                    orig_stack_contexts = stack_context._state.contexts
                    yielded = next(result)
                    if stack_context._state.contexts is not orig_stack_contexts:
                        yielded = TracebackFuture()
                        yielded.set_exception(
                            stack_context.StackContextInconsistentError(
                                'stack_context inconsistency (probably caused '
                                'by yield within a "with StackContext" block)'))
                except (StopIteration, Return) as e:
                    future.set_result(getattr(e, 'value', None))
                except Exception:
                    future.set_exc_info(sys.exc_info())
                else:
                    Runner(result, future, yielded)
                try:
                    return future
                finally:
                    future = None
        future.set_result(result)
        return future
    return wrapper
</code></pre> 
<p>如源码所示,<code>func</code>运行的结果是<code>GeneratorType</code> ,<code>yielded = next(result)</code>,<br>运行至原函数的yield位置,返回的是原函数<code>func</code>内部 <code>yield</code> <code>右边</code>返回的对象(必须是<code>Future</code>或<code>Future</code>的<code>list</code>)给<code>yielded</code>.<br>经过<code>Runner(result, future, yielded)</code> 对yielded进行处理.<br>在此就 贴出Runner的代码了.<br>Runner初始化过程,调用<code>handle_yield</code>, 查看<code>yielded</code>是否已<code>done</code>了,否则<code>add_future</code>运行<code>Runner</code>的<code>run</code>方法,<br><code>run</code>方法中如果<code>yielded</code>对象已完成,用对它的<code>gen</code>调用<code>send</code>,发送完成的结果.<br>所以<code>yielded</code>在什么地方被<code>set_result</code>非常重要,<br>当被<code>set_result</code>的时候,才会<code>send</code>结果给原<code>func</code>,完成整个异步操作</p> 
<p>详情可以查看tornado 中重要的对象 iostream,源码中iostream的 _handle_connect,如此设置了连接的result.</p> 
<pre><code>def _handle_connect(self):
        err = self.socket.getsockopt(socket.SOL_SOCKET, socket.SO_ERROR)
        if err != 0:
            self.error = socket.error(err, os.strerror(err))
            if self._connect_future is None:
                gen_log.warning("Connect error on fd %s: %s",
                                self.socket.fileno(), errno.errorcode[err])
            self.close()
            return
        if self._connect_callback is not None:
            callback = self._connect_callback
            self._connect_callback = None
            self._run_callback(callback)
        if self._connect_future is not None:
            future = self._connect_future
            self._connect_future = None
            future.set_result(self)
        self._connecting = False
</code></pre> 
<p>最后贴上一个简单的测试代码,演示coroutine,future的用法</p> 
<pre><code>import tornado.ioloop
from tornado.gen import coroutine
from tornado.concurrent import Future

@coroutine
def asyn_sum(a, b):
	print("begin calculate:sum %d+%d"%(a,b))
	future = Future()
	future2 = Future()
	iol = tornado.ioloop.IOLoop.instance()
	
	print future
	
	def callback(a, b):
		print("calculating the sum of %d+%d:"%(a,b))
		future.set_result(a+b)

		iol.add_timeout(iol.time()+3,lambda f:f.set_result(None),future2)
	iol.add_timeout(iol.time()+3,callback, a, b)

	result = yield future

	print("after yielded")
	print("the %d+%d=%d"%(a, b, result))

	yield future2

	print 'after future2'

def main():
	f =  asyn_sum(2,3)
	
	print ''
	print f
	tornado.ioloop.IOLoop.instance().start()

if __name__ == "__main__":
	main()

</code></pre> 
<p>运行结果:</p> 
<p><img src="http://192.168.79.254:8080/oschina/images/uploads/img/201507/08214324_mBzN.png" alt="输入图片说明" title="在这里输入图片标题"></p>
<p>为什么代码中个yield都起作用了? 因为<code>Runner.run</code>里,最后继续用<code>handle_yield</code>处理了<code>send</code>后返回的<code>yielded</code>对象,意思是<code>func</code>里可以有n干个<code>yield</code>操作</p> 
<pre><code>if not self.handle_yield(yielded):
                    return
</code></pre> 
<h3>总结</h3> 
<p>至此,已完成tornado中重要的几个模块的流程,其他模块也是由此而来.写了这么多,越写越卡,就到此为止先吧,</p> 
<h2>最后的最后的最后</h2> 
<p>啊~~~~~~好想有份<code>工作</code> 和<code>女朋友</code>啊~~~~~</p>]]></body>
		<author><![CDATA[国夫君]]></author>
		<authorid>874613</authorid>
		<documentType>1</documentType>
        <pubDate>2015-07-08 21:39:44</pubDate>
		<favorite>0</favorite>
			</blog>
</oschina>